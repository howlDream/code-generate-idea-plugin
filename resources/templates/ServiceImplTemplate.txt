package com.kykj.tesla.mall.service.impl;

import lombok.extern.slf4j.Slf4j;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.kykj.tesla.mall.service.${module}Service;
import com.kykj.tesla.mall.mapper.dao.${module}Mapper;
import com.kykj.tesla.mall.entity.${module};
import com.kykj.tesla.mall.entity.${module}Example;
import com.kykj.tesla.mall.v2.request.${module}ListRequest;
import com.kykj.tesla.mall.v2.model.${module}ListModel;

import com.planck.corona.common.exception.BaseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import cn.hutool.core.bean.BeanUtil;

/**
 * ${module}服务实现
 * @author zheng.li
 */
@Service
@Slf4j
public class ${module}ServiceImpl implements ${module}Service {


    @Autowired
    @SuppressWarnings("all")
    private ${module}Mapper ${moduleLittle}Mapper;


    @Override
    public void save${module}(${module} entity) {
        if (entity == null) return;
        if (entity.getId() == null || entity.getId() == 0) {
            // 新增
            insert(entity);
        } else {
            // 更新
            update(entity);
        }
    }

    /**
     * 插入
     * @param entity ${module}
     */
    private void insert(${module} entity) {
        try {
            entity.setCreateTime(new Date());
            entity.setUpdateTime(new Date());
            entity.setDeleted((byte)0);
            ${moduleLittle}Mapper.insert(entity);
        } catch (Exception e) {
            log.error("插入${module}失败",e);
            throw new BaseException("-1","数据库保存失败！");
        }
    }

    /**
     * 更新
     * @param entity ${module}
     */
    private void update(${module} entity) {
        try {
            entity.setUpdateTime(new Date());
            ${moduleLittle}Mapper.updateByPrimaryKeySelective(entity);
        } catch (Exception e) {
            log.error("更新${module}失败",e);
            throw new BaseException("-1","数据库保存失败！");
        }
    }

    @Override
    public ${module} get(Long id) {
        if (id == null ) return null;
        return ${moduleLittle}Mapper.selectByPrimaryKey(id);
    }

    @Override
    public PageInfo<${module}ListModel> getList(${module}ListRequest request) {
        ${module}Example example = new ${module}Example();
        ${module}Example.Criteria criteria = example.createCriteria();
        criteria.andMerchantIdIn(request.getMerchantIds()).andDeletedEqualTo((byte)0);
         // 分页
        PageHelper.startPage(request.getPageIndex(),request.getPageSize());
        List<${module}> ${moduleLittle}List = ${moduleLittle}Mapper.selectByExample(example);
        PageInfo<${module}> pageInfo = PageInfo.of(${moduleLittle}List);
        List<${module}ListModel>  modelList = new ArrayList<>();
        for (${module} ${moduleLittle} : ${moduleLittle}List) {
            ${module}ListModel listModel = new ${module}ListModel();
            BeanUtil.copyProperties(${moduleLittle},listModel);
            modelList.add(listModel);
        }
        PageInfo<${module}ListModel> newPageInfo = new PageInfo<>();
        // 拷贝分页信息
        BeanUtil.copyProperties(pageInfo,newPageInfo);
        newPageInfo.setList(modelList);

        return newPageInfo;
    }

}
